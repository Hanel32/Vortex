/*--------------------------------------------------------------------------------------------
 - Vortex: Extreme-Performance Memory Abstractions for Data-Intensive Streaming Applications -
 - Copyright(C) 2020 Carson Hanel, Arif Arman, Di Xiao, John Keech, Dmitri Loguinov          -
 - Produced via research carried out by the Texas A&M Internet Research Lab                  -
 -                                                                                           -
 - This program is free software : you can redistribute it and/or modify                     -
 - it under the terms of the GNU General Public License as published by                      -
 - the Free Software Foundation, either version 3 of the License, or                         -
 - (at your option) any later version.                                                       -
 -                                                                                           -
 - This program is distributed in the hope that it will be useful,                           -
 - but WITHOUT ANY WARRANTY; without even the implied warranty of                            -
 - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the                               -
 - GNU General Public License for more details.                                              -
 -                                                                                           -
 - You should have received a copy of the GNU General Public License                         -
 - along with this program. If not, see < http://www.gnu.org/licenses/>.                     -
 --------------------------------------------------------------------------------------------*/
#include "SortingNetwork64.h"

#ifdef __linux__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif

// explicit template instantiation
template class SortingNetwork<uint64_t>;
template class SortingNetwork<uint32_t>;
template class SortingNetwork<uint16_t>;
template class SortingNetwork<uint8_t >;

// insertion sort for small sorts
template <typename ItemType>
void SortingNetwork<ItemType>::insertionSort2(ItemType arr[], int length) {
	int i, j;
	ItemType key;
	for (j = 1; j < length; j++) {                         // start with 1 (not 0)
		key = arr[j];
		for (i = j - 1; (i >= 0) && (arr[i] > key); i--)   // smaller values move down
			arr[i + 1] = arr[i];
		arr[i + 1] = key;                                  // put key into its proper location
	}
}

// setup sorting network function pointer array
template <typename ItemType>
SortingNetwork<ItemType>::SortingNetwork(void) {
	p[0]  = sort0;
	p[1]  = sort1;
	p[2]  = sort2;
	p[3]  = sort3;
	p[4]  = sort4;
	p[5]  = sort5;
	p[6]  = sort6;
	p[7]  = sort7;
	p[8]  = sort8;
	p[9]  = sort9;
	p[10] = sort10;
	p[11] = sort11;
	p[12] = sort12;
	p[13] = sort13;
	p[14] = sort14;
	p[15] = sort15;
	p[16] = sort16;
	p[17] = sort17;
	p[18] = sort18;
	p[19] = sort19;
	p[20] = sort20;
	p[21] = sort21;
	p[22] = sort22;
	p[23] = sort23;
	p[24] = sort24;
	p[25] = sort25;
	p[26] = sort26;
	p[27] = sort27;
	p[28] = sort28;
	p[29] = sort29;
	p[30] = sort30;
	p[31] = sort31;
	p[32] = sort32;
}

template <typename ItemType>
SortingNetwork<ItemType>::~SortingNetwork(void) {}
template <typename ItemType>
void SortingNetwork<ItemType>::sort(ItemType *d, int size) { (*p[size])(d); }

// already defined in minwindef.h
#define MIN(x, y) (x<y?x:y)
#define MAX(x, y) (x<y?y:x) 
#define SWAP(x,y) { const ItemType a = MIN(d[x], d[y]); const ItemType b = d[x] + d[y] - a; d[x] = a; d[y] = b;}

// null functions to prevent branching
// need to suppress 4100 for null function w/ variable
#ifdef _WIN32
#pragma warning( push )
#pragma warning( disable : 4100)
#endif
template <typename ItemType>
inline void SortingNetwork<ItemType>::sort0(ItemType* d) {}
template <typename ItemType>
inline void SortingNetwork<ItemType>::sort1(ItemType* d) {}
#ifdef _WIN32
#pragma warning( pop )
#endif

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort2(ItemType *d) {
	SWAP(0, 1);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort3(ItemType *d) {
	SWAP(0, 2);	SWAP(0, 1);	SWAP(1, 2);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort4(ItemType *d) {
	SWAP(0, 2);	SWAP(1, 3);	SWAP(0, 1);	SWAP(2, 3);	SWAP(1, 2);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort5(ItemType *d) {
	SWAP(0, 4); SWAP(0, 2); SWAP(1, 3); SWAP(2, 4); SWAP(0, 1); SWAP(2, 3); SWAP(1, 4); SWAP(1, 2); SWAP(3, 4);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort6(ItemType *d) {
	SWAP(0, 4); SWAP(1, 5); SWAP(0, 2); SWAP(1, 3); SWAP(2, 4); SWAP(3, 5); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(1, 4); SWAP(1, 2); SWAP(3, 4);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort7(ItemType *d) {
	SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(2, 4); SWAP(3, 5); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(1, 4); SWAP(3, 6); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort8(ItemType *d) {
	SWAP(0, 4);	SWAP(1, 5);	SWAP(2, 6);	SWAP(3, 7);	SWAP(0, 2);	SWAP(1, 3);	SWAP(4, 6);	SWAP(5, 7);	SWAP(2, 4);	SWAP(3, 5);	SWAP(0, 1);	SWAP(2, 3);	SWAP(4, 5);	SWAP(6, 7);	SWAP(1, 4);	SWAP(3, 6);	SWAP(1, 2);	SWAP(3, 4);	SWAP(5, 6);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort9(ItemType *d) {
	SWAP(0, 8); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(4, 8); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(2, 8); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(1, 8); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort10(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(4, 8); SWAP(5, 9); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(2, 8); SWAP(3, 9); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(1, 8); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort11(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(2, 8); SWAP(3, 9); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(1, 8); SWAP(3, 10); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort12(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(2, 8); SWAP(3, 9); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(1, 8); SWAP(3, 10); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort13(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(4, 12); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(8, 12); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(2, 8); SWAP(3, 9); SWAP(6, 12); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(10, 12); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(1, 8); SWAP(3, 10); SWAP(5, 12); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(9, 12); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10); SWAP(11, 12);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort14(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(4, 12); SWAP(5, 13); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(8, 12); SWAP(9, 13); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(2, 8); SWAP(3, 9); SWAP(6, 12); SWAP(7, 13); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(10, 12); SWAP(11, 13); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(12, 13); SWAP(1, 8); SWAP(3, 10); SWAP(5, 12); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(9, 12); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10); SWAP(11, 12);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort15(ItemType *d) {
	SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(4, 12); SWAP(5, 13); SWAP(6, 14); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(8, 12); SWAP(9, 13); SWAP(10, 14); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(12, 14); SWAP(2, 8); SWAP(3, 9); SWAP(6, 12); SWAP(7, 13); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(10, 12); SWAP(11, 13); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(12, 13); SWAP(1, 8); SWAP(3, 10); SWAP(5, 12); SWAP(7, 14); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(9, 12); SWAP(11, 14); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10); SWAP(11, 12); SWAP(13, 14);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort16(ItemType *d) {
	SWAP(0, 1);	SWAP(2, 3);	SWAP(4, 5);	SWAP(6, 7);	SWAP(8, 9);	SWAP(10, 11);	SWAP(12, 13);	SWAP(14, 15);	SWAP(0, 2);	SWAP(4, 6);	SWAP(8, 10);	SWAP(12, 14);	SWAP(1, 3);	SWAP(5, 7);	SWAP(9, 11);	SWAP(13, 15);	SWAP(0, 4);	SWAP(8, 12);	SWAP(1, 5);	SWAP(9, 13);	SWAP(2, 6);	SWAP(10, 14);	SWAP(3, 7);	SWAP(11, 15);	SWAP(0, 8);	SWAP(1, 9);	SWAP(2, 10);	SWAP(3, 11);	SWAP(4, 12);	SWAP(5, 13);	SWAP(6, 14);	SWAP(7, 15);	SWAP(5, 10);	SWAP(6, 9);	SWAP(3, 12);	SWAP(13, 14);	SWAP(7, 11);	SWAP(1, 2);	SWAP(4, 8);	SWAP(1, 4);	SWAP(7, 13);	SWAP(2, 8);	SWAP(11, 14);	SWAP(2, 4);	SWAP(5, 6);	SWAP(9, 10);	SWAP(11, 13);	SWAP(3, 8);	SWAP(7, 12);
	SWAP(6, 8);	SWAP(10, 12);	SWAP(3, 5);	SWAP(7, 9);	SWAP(3, 4);	SWAP(5, 6);	SWAP(7, 8);	SWAP(9, 10);	SWAP(11, 12);	SWAP(6, 7);	SWAP(8, 9);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort17(ItemType *d) {
	SWAP(0, 16); SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(4, 12); SWAP(5, 13); SWAP(6, 14); SWAP(7, 15); SWAP(8, 16); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(8, 12); SWAP(9, 13); SWAP(10, 14); SWAP(11, 15); SWAP(4, 16); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(12, 16); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(12, 14); SWAP(13, 15); SWAP(2, 16); SWAP(2, 8); SWAP(3, 9); SWAP(6, 12); SWAP(7, 13); SWAP(10, 16); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(10, 12); SWAP(11, 13); SWAP(14, 16); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(12, 13); SWAP(14, 15); SWAP(1, 16); SWAP(1, 8); SWAP(3, 10); SWAP(5, 12); SWAP(7, 14); SWAP(9, 16); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(9, 12); SWAP(11, 14); SWAP(13, 16); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10); SWAP(11, 12); SWAP(13, 14); SWAP(15, 16);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort18(ItemType *d) {
	SWAP(0, 16); SWAP(1, 17); SWAP(0, 8); SWAP(1, 9); SWAP(2, 10); SWAP(3, 11); SWAP(4, 12); SWAP(5, 13); SWAP(6, 14); SWAP(7, 15); SWAP(8, 16); SWAP(9, 17); SWAP(0, 4); SWAP(1, 5); SWAP(2, 6); SWAP(3, 7); SWAP(8, 12); SWAP(9, 13); SWAP(10, 14); SWAP(11, 15); SWAP(4, 16); SWAP(5, 17); SWAP(4, 8); SWAP(5, 9); SWAP(6, 10); SWAP(7, 11); SWAP(12, 16); SWAP(13, 17); SWAP(0, 2); SWAP(1, 3); SWAP(4, 6); SWAP(5, 7); SWAP(8, 10); SWAP(9, 11); SWAP(12, 14); SWAP(13, 15); SWAP(2, 16); SWAP(3, 17); SWAP(2, 8); SWAP(3, 9); SWAP(6, 12); SWAP(7, 13); SWAP(10, 16); SWAP(11, 17); SWAP(2, 4); SWAP(3, 5); SWAP(6, 8); SWAP(7, 9); SWAP(10, 12); SWAP(11, 13); SWAP(14, 16); SWAP(15, 17); SWAP(0, 1); SWAP(2, 3); SWAP(4, 5); SWAP(6, 7); SWAP(8, 9); SWAP(10, 11); SWAP(12, 13); SWAP(14, 15); SWAP(16, 17); SWAP(1, 16); SWAP(1, 8); SWAP(3, 10); SWAP(5, 12); SWAP(7, 14); SWAP(9, 16); SWAP(1, 4); SWAP(3, 6); SWAP(5, 8); SWAP(7, 10); SWAP(9, 12); SWAP(11, 14); SWAP(13, 16); SWAP(1, 2); SWAP(3, 4); SWAP(5, 6); SWAP(7, 8); SWAP(9, 10); SWAP(11, 12); SWAP(13, 14); SWAP(15, 16);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort19(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort20(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort21(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort22(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort23(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort24(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort25(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort26(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort27(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort28(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(11, 27);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(19, 27);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(15, 27);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(23, 27);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(25, 27);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(26, 27);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort29(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(11, 27);
	SWAP(12, 28);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(19, 27);
	SWAP(20, 28);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(24, 28);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(15, 27);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(23, 27);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(25, 27);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(14, 28);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(22, 28);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(26, 28);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(26, 27);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(13, 28);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(21, 28);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(25, 28);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
	SWAP(27, 28);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort30(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(11, 27);
	SWAP(12, 28);
	SWAP(13, 29);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(19, 27);
	SWAP(20, 28);
	SWAP(21, 29);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(24, 28);
	SWAP(25, 29);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(15, 27);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(23, 27);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(25, 27);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(14, 28);
	SWAP(15, 29);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(22, 28);
	SWAP(23, 29);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(26, 28);
	SWAP(27, 29);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(26, 27);
	SWAP(28, 29);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(13, 28);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(21, 28);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(25, 28);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
	SWAP(27, 28);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort31(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(11, 27);
	SWAP(12, 28);
	SWAP(13, 29);
	SWAP(14, 30);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(19, 27);
	SWAP(20, 28);
	SWAP(21, 29);
	SWAP(22, 30);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(24, 28);
	SWAP(25, 29);
	SWAP(26, 30);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(15, 27);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(23, 27);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(25, 27);
	SWAP(28, 30);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(14, 28);
	SWAP(15, 29);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(22, 28);
	SWAP(23, 29);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(26, 28);
	SWAP(27, 29);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(26, 27);
	SWAP(28, 29);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(13, 28);
	SWAP(15, 30);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(21, 28);
	SWAP(23, 30);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(25, 28);
	SWAP(27, 30);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
	SWAP(27, 28);
	SWAP(29, 30);
}

template <typename ItemType>
inline void SortingNetwork<ItemType>::sort32(ItemType *d) {
	SWAP(0, 16);
	SWAP(1, 17);
	SWAP(2, 18);
	SWAP(3, 19);
	SWAP(4, 20);
	SWAP(5, 21);
	SWAP(6, 22);
	SWAP(7, 23);
	SWAP(8, 24);
	SWAP(9, 25);
	SWAP(10, 26);
	SWAP(11, 27);
	SWAP(12, 28);
	SWAP(13, 29);
	SWAP(14, 30);
	SWAP(15, 31);
	SWAP(0, 8);
	SWAP(1, 9);
	SWAP(2, 10);
	SWAP(3, 11);
	SWAP(4, 12);
	SWAP(5, 13);
	SWAP(6, 14);
	SWAP(7, 15);
	SWAP(16, 24);
	SWAP(17, 25);
	SWAP(18, 26);
	SWAP(19, 27);
	SWAP(20, 28);
	SWAP(21, 29);
	SWAP(22, 30);
	SWAP(23, 31);
	SWAP(8, 16);
	SWAP(9, 17);
	SWAP(10, 18);
	SWAP(11, 19);
	SWAP(12, 20);
	SWAP(13, 21);
	SWAP(14, 22);
	SWAP(15, 23);
	SWAP(0, 4);
	SWAP(1, 5);
	SWAP(2, 6);
	SWAP(3, 7);
	SWAP(8, 12);
	SWAP(9, 13);
	SWAP(10, 14);
	SWAP(11, 15);
	SWAP(16, 20);
	SWAP(17, 21);
	SWAP(18, 22);
	SWAP(19, 23);
	SWAP(24, 28);
	SWAP(25, 29);
	SWAP(26, 30);
	SWAP(27, 31);
	SWAP(4, 16);
	SWAP(5, 17);
	SWAP(6, 18);
	SWAP(7, 19);
	SWAP(12, 24);
	SWAP(13, 25);
	SWAP(14, 26);
	SWAP(15, 27);
	SWAP(4, 8);
	SWAP(5, 9);
	SWAP(6, 10);
	SWAP(7, 11);
	SWAP(12, 16);
	SWAP(13, 17);
	SWAP(14, 18);
	SWAP(15, 19);
	SWAP(20, 24);
	SWAP(21, 25);
	SWAP(22, 26);
	SWAP(23, 27);
	SWAP(0, 2);
	SWAP(1, 3);
	SWAP(4, 6);
	SWAP(5, 7);
	SWAP(8, 10);
	SWAP(9, 11);
	SWAP(12, 14);
	SWAP(13, 15);
	SWAP(16, 18);
	SWAP(17, 19);
	SWAP(20, 22);
	SWAP(21, 23);
	SWAP(24, 26);
	SWAP(25, 27);
	SWAP(28, 30);
	SWAP(29, 31);
	SWAP(2, 16);
	SWAP(3, 17);
	SWAP(6, 20);
	SWAP(7, 21);
	SWAP(10, 24);
	SWAP(11, 25);
	SWAP(14, 28);
	SWAP(15, 29);
	SWAP(2, 8);
	SWAP(3, 9);
	SWAP(6, 12);
	SWAP(7, 13);
	SWAP(10, 16);
	SWAP(11, 17);
	SWAP(14, 20);
	SWAP(15, 21);
	SWAP(18, 24);
	SWAP(19, 25);
	SWAP(22, 28);
	SWAP(23, 29);
	SWAP(2, 4);
	SWAP(3, 5);
	SWAP(6, 8);
	SWAP(7, 9);
	SWAP(10, 12);
	SWAP(11, 13);
	SWAP(14, 16);
	SWAP(15, 17);
	SWAP(18, 20);
	SWAP(19, 21);
	SWAP(22, 24);
	SWAP(23, 25);
	SWAP(26, 28);
	SWAP(27, 29);
	SWAP(0, 1);
	SWAP(2, 3);
	SWAP(4, 5);
	SWAP(6, 7);
	SWAP(8, 9);
	SWAP(10, 11);
	SWAP(12, 13);
	SWAP(14, 15);
	SWAP(16, 17);
	SWAP(18, 19);
	SWAP(20, 21);
	SWAP(22, 23);
	SWAP(24, 25);
	SWAP(26, 27);
	SWAP(28, 29);
	SWAP(30, 31);
	SWAP(1, 16);
	SWAP(3, 18);
	SWAP(5, 20);
	SWAP(7, 22);
	SWAP(9, 24);
	SWAP(11, 26);
	SWAP(13, 28);
	SWAP(15, 30);
	SWAP(1, 8);
	SWAP(3, 10);
	SWAP(5, 12);
	SWAP(7, 14);
	SWAP(9, 16);
	SWAP(11, 18);
	SWAP(13, 20);
	SWAP(15, 22);
	SWAP(17, 24);
	SWAP(19, 26);
	SWAP(21, 28);
	SWAP(23, 30);
	SWAP(1, 4);
	SWAP(3, 6);
	SWAP(5, 8);
	SWAP(7, 10);
	SWAP(9, 12);
	SWAP(11, 14);
	SWAP(13, 16);
	SWAP(15, 18);
	SWAP(17, 20);
	SWAP(19, 22);
	SWAP(21, 24);
	SWAP(23, 26);
	SWAP(25, 28);
	SWAP(27, 30);
	SWAP(1, 2);
	SWAP(3, 4);
	SWAP(5, 6);
	SWAP(7, 8);
	SWAP(9, 10);
	SWAP(11, 12);
	SWAP(13, 14);
	SWAP(15, 16);
	SWAP(17, 18);
	SWAP(19, 20);
	SWAP(21, 22);
	SWAP(23, 24);
	SWAP(25, 26);
	SWAP(27, 28);
	SWAP(29, 30);
}
#ifdef __linux__
#pragma GCC diagnostic pop
#endif
#undef SWAP
#undef MIN
#undef MAX